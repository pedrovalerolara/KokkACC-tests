MiniAero Readme
---------------

Sections:
---------
I) Introduction
II) Building
III) Running
IV) Testing


I) Introduction

MiniAero is a mini-application for the evaulation of programming models and hardware
for next generation platforms.  MiniAero is an explicit (using RK4) unstructured 
finite volume code that solves the compressible Navier-Stokes equations. Both
inviscid and viscous terms are included.  The viscous terms can be optionally
included or excluded.

Meshes are created in code and are simple 3D hex8 meshes.  These
meshes are generated on the host and then moved to the
device.  While the meshes generated in code are structured, the code itself
uses unstructured mesh data structures and a truly unstructured
mesh could be read in in the future.  In the future, these
meshes may be created on device(GPU or Xeon Phi or other).

---------------------

II) Building MiniAero

MiniAero has minimal dependencies. It directly depends on the
Kokkos library. You can check this out from github:
git clone https://github.com:kokkos/kokkos

MiniAero uses simple Makefiles and builds Kokkos as an 
integrated library (i.e. you do not need to pre-install 
Kokkos). 

Simply run:
make KOKKOS_PATH=${PATH_TO_KOKKOS_CHECKOUT_DIRECTORY} -j 
or 
make KOKKOS_PATH=${PATH_TO_KOKKOS_CHECKOUT_DIRECTORY} -f Makefile.mpi -j

This will produce miniAero.host and miniAero.mpi.

If you checked Kokkos out directly in your home directory (i.e. it is located 
in ${HOME}/kokkos. You do not need to specify the path. 

Usual Kokkos gnu make options apply. For example to build on IBM Power8 for
NVIDIA P100 GPUs:
make KOKKOS_ARCH=Power8,Pascal60 KOKKOS_DEVICES=Cuda,OpenMP -j
or to build for Intel KNL:
make KOKKOS_ARCH=KNL CXX=icpc -j

For more information please refer to the Kokkos documentation. 

---------------------

III) Running MiniAero
To run MiniAero, run the executable in serial:
./miniaero
Or using MPI for parallel:
mpirun -np #num_procs ./miniaero

MiniAero will read in the input file which is hard-coded to be named
miniaero.inp.  miniaero.inp must be in the current directory.

The input file consists of 10 lines:

problem_type (0 - Sod, 1 - Viscous Flat Plate, 2 - Inviscid Ramp)
lx ly lz ramp_angle (lx,ly,lz are domain max dimensions in x,y z) (ramp_angle either SOD(angle=0)  or ramp problem)
nx ny nz (Total Number of cells in each direcion)
ntimesteps (number of timestep)
dt (timestep size)
output_results (0 - no, anything else yes)
information output_frequency (Things like timestep, iteration count).
second order space (0 - no, anything else yes)
viscous (0 - no, anything else yes)

An example(Inviscid second-order in space 30 degree ramp problem with 2.0x2.0x1.0 
domain with 64x32x2 points, 400 timestep, 1e-5 timestep size, 
outputs the results, and outputs an information summary every 100 timesteps):
2
2.0 2.0 1.0 30.0
64 32 2
400
1e-5
1
100
1
0

--------------------

IV) Testing MiniAero

A handful for integration tests are included for sanity check.  It is possible that these tests
will diff if using different compilers.

The tests are included in the test/ directory. To run all tests run
make test
or
make -f Makefile.mpi test

The README in the test/ directory describes the different tests.  The tests also has good
examples of input file options.
